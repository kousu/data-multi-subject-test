# edit
name: Dataset Validator
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  Validate:
    runs-on: ubuntu-latest

    steps:

    ## Dependencies
    #

    - name: Check disk space
      run: df

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    #- name: Update software
    #  run: |
    #    # do we want to do this? it's helpful to avoid testing against surprise out-of-date software, but also so slow.
    #    sudo apt-get update &&
    #    sudo DEBIAN_FRONTEND=noninteractive apt-get -y dist-upgrade &&
    #    sudo DEBIAN_FRONTEND=noninteractive apt-get autoremove

    - name: Install git-annex
      run: |
        sudo apt-get install -y git-annex
        git config --global annex.thin true

    - name: Install bids-validator
      run: |
        # install proper NodeJS for bids-validator
        curl -sL https://deb.nodesource.com/setup_current.x | sudo -E bash -
        sudo apt-get install -y nodejs
        sudo npm install -g bids-validator

    - name: Cache python dependencies
      # Oddly this doesn't seem to save any time. In fact it's sometimes a bit slower(!) than not caching.
      # The longest part of installing spinegeneric seems to be waiting for pip to unpack all the .whl's,
      # not downloading them in the first place.
      #
      # maybe Github has an internal mirror of pypi in their datacenters?
      # or maybe they just have a really, really, really good internet connection.
      id: cache-pip
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        # by using github.sha *every* run will generate a new cache
        # however at least they will be loading their new caches from the old caches, so it should be faster
        key: ${{ runner.os }}-pip-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install spine-generic for acquisition parameters check
      run: pip install spinegeneric@git+https://github.com/spine-generic/spine-generic.git@master

    #- name: Increase free space
    #   run: |
    #    # this takes about 2 minutes but saves about 30GB, which is space we might need for git-annex.
    #    # annex.thin saves a lot of space, but if the dataset grows beyond what Github can handle
    #    # try enabling this.
    #    # ref: https://github.com/actions/virtual-environments/issues/2606#issuecomment-772683150
    #    sudo rm -rf /usr/local/lib/android /usr/share/dotnet

    - name: Check disk space
      run: df


    ## Download dataset
    #

    - name: Checkout
      uses: actions/checkout@v2
      with:
        # make sure to download directly from the PR's repo, whether that is this repo or a fork
        # By default github generates a merge commit for each PR in this repo, but only for the one branch under test
        # but `git-annex` needs access to *two* branches: the current branch and `git-annex`
        # this might be subtly buggy since it is testing the remote version, not the merged version
        #
        # *if* this is not a pull request, this will fall back to its default behaviour.
        repository: ${{github.event.pull_request.head.repo.full_name}}
        ref: ${{ github.event.pull_request.head.ref }}

    - name: git config
      run: |
        # this is needed by git-annex so that it can write to the local git-annex branch
        # the tracking information about the local copy
        git config --global user.name "gh-actions"
        git config --global user.email "gh-actions"
        # but actually, disable those writes. We don't need them because we're throwing away this copy immediately.
        # this might make the previous two lines unnecessary, but it's safer just to leave them both in
        git config annex.alwayscommit false

    - name: Check disk space
      run: df

    # Cache the dataset
    # ref: https://docs.github.com/en/actions/guides/caching-dependencies-to-speed-up-workflows#matching-a-cache-key
    # ref: https://git-annex.branchable.com/tips/local_caching_of_annexed_files/
    #
    # This is rather verbose, because git-annex is too fragile to let us just directly cache its (mostly static) .git/annex or
    # .git/annex/objects directory separate from the (mostly changing) outer repo. The only approved way is to make an
    # entire separate annex and cache the entire repo around it. annex.hardlink is designed for this specific usage and means
    # at least this doesn't take up any extra space.
    #
    # Unlike [TravisCI's caching](https://docs.travis-ci.com/user/caching/), Github's cache isn't smart enough
    # to *detect* when a cache changes. Instead it expects that you can predict what will be in your cache
    # from what is in your repo, and it keys based on that. Luckily, git-annex lets us do that:
    # we just have to hash all the files we expect to be found in the annex, before we actually check them out,
    # when their contents are the hashes of the real files.
    - name: Download annex cache
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          ~/.annex-cache
        key: gannex-${{ hashFiles('sub-*/**/*.nii.gz', 'sub-*/**/*.nii') }} # must be kept in sync with files annexed via .gitattributes
        restore-keys: |
          gannex-

    # https://git-annex.branchable.com/tips/local_caching_of_annexed_files/#creating-the-cache
    - name: Init annex cache
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        git init --bare ~/.annex-cache
        cd ~/.annex-cache
        git annex init
        git config annex.hardlink true
        git annex untrust here

    # https://git-annex.branchable.com/tips/local_caching_of_annexed_files/#making-repositories-use-the-cache
    - name: Use annex cache
      run: |
        git remote add cache ~/.annex-cache
        git config remote.cache.annex-speculate-present true
        git config remote.cache.annex-cost 10
        git config remote.cache.annex-pull false
        git config remote.cache.annex-push false
        git config remote.cache.fetch do-not-fetch-from-this-remote:

        # checksumming is a large fraction of time
        # save this time by trusting Github to keep data integrity.
        git config remote.cache.annex-verify false

        # workaround this bug: https://github.com/spine-generic/data-multi-subject/pull/82#issuecomment-821008209
        # git-annex can't handle making hardlinks *between* repos and also
        # from *from* a repo to its checkout. Most workarounds confuse it.
        # but by making the hardlinks *for* it it is content to leave them alone.
        find ~/.annex-cache/annex/objects/ -type f |
          while read object; do
            git grep -l "$(basename "$object")" |
            while read checkout; do
              ln -vf "$object" "$checkout"
            done
          done

    - name: Check disk space
      run: df

    - name: Download dataset
      run: |
        git fetch --depth=1 origin git-annex:git-annex # CI does a shallow checkout, so it is missing this important branch
        git annex init
        #git annex get -J8
        git annex get -J8 sub-{a,b,c}* # DEBUG: use a limited subset to speed up testing 

    - name: Check disk space
      run: df

    - name: check up on the cache
      run: (cd ~/.annex-cache; git log --oneline git-annex | cat)

    # https://git-annex.branchable.com/tips/local_caching_of_annexed_files/#populating-the-cache
    - name: Update annex cache
      run: |
        # in order to populate the cache efficiently,
        # git-annex needs annex.hardlink on the *source* repo
        # (because it does its own refcounting on top of the OS's and needs to be told to chill out about that)
        # annex.hardlink is about making hardlinks between .git/annex/objects folders in different repos
        # annex.thin is about making hardlinks from .git/annex/objects to files in the checkout in ./
        # they have not been designed compatibly.
        git config --global --unset annex.thin || true
        git config --unset annex.thin || true
        git config annex.hardlink true
        git annex untrust here

        git annex copy --to cache

    - name: Check disk space
      run: df

    - name: check up on the cache
      run: (cd ~/.annex-cache; git log --oneline git-annex | cat)


    ## Tests
    #

    - name: Checking BIDS compliance
      run: bids-validator --verbose ./ || true

    #- name: Checking acquisition parameters
    #  run: sg_params_checker -path-in ./ || true

    - name: Checking data consistency
      run: sg_check_data_consistency -path-in ./ || true
